##### macro definitions for flavor "#FLAVOR#" #####

%#FLAVOR#_shbang_opts     %py_shbang_opts

%__#FLAVOR#               %{_bindir}/%{lua: print((string.gsub("#FLAVOR#", "(%a+%d)(%d+)", "%1.%2")))}

%#FLAVOR#_prefix          #FLAVOR#
%#FLAVOR#_sitelib         %{_python_sysconfig_path %__#FLAVOR# purelib}
%#FLAVOR#_sitearch        %{_python_sysconfig_path %__#FLAVOR# platlib}
%#FLAVOR#_version         %{_python_sysconfig_var  %__#FLAVOR# py_version_short}
%#FLAVOR#_version_nodots  %{_python_sysconfig_var  %__#FLAVOR# py_version_nodot}

%#FLAVOR#_sysconfig_path()  %{_python_sysconfig_path %__#FLAVOR# %1}
%#FLAVOR#_sysconfig_var()   %{_python_sysconfig_var %__#FLAVOR# %1}

%#FLAVOR#_bin_suffix      %{?!_#FLAVOR#_bin_suffix:%#FLAVOR#_version}%{?_#FLAVOR#_bin_suffix}

# Check if there is a major version symlink to our flavor in the current build system. If so, we are the primary provider.
%#FLAVOR#_provides %(provides=""; \
for flavorbin in %{_bindir}/python?; do \
  if [ $flavorbin != %__#FLAVOR# -a $(realpath $flavorbin) = %__#FLAVOR# ]; then \
    provides="$provides $(basename $flavorbin)"; \
  fi; \
done; \
echo ${provides# }; \
)

%if#FLAVOR#      %if "%{python_flavor}" == "#FLAVOR#"

%#FLAVOR#_only() %if "%{python_flavor}" == "#FLAVOR#" \
%** \
%endif

%#FLAVOR#_build \
%{_python_use_flavor #FLAVOR#} \
%__#FLAVOR# %{py_setup} %{?py_setup_args} build \\\
    --executable="%__#FLAVOR# %#FLAVOR#_shbang_opts"

%#FLAVOR#_install \
%{_python_use_flavor #FLAVOR#} \
%__#FLAVOR# %{py_setup} %{?py_setup_args} install \\\
    -O1 --skip-build --force --root %{buildroot} --prefix %{_prefix}

%#FLAVOR#_alternative() %{_python_macro_init} \
%{lua:local link, name, path = python_alternative_names(rpm.expand("%1"), rpm.expand("%#FLAVOR#_bin_suffix")) \
local libalternatives = rpm.expand("%{with libalternatives}") \
if libalternatives == "1" then \
  if not link:startswith(rpm.expand("%{_mandir}")) then \
    local prio = alternative_prio("#FLAVOR#") \
    print(rpm.expand("%dir %{_datadir}/libalternatives/" .. name .. "\\\n")) \
    print(rpm.expand("%{_datadir}/libalternatives/" .. name .. "/" .. prio .. ".conf\\\n")) \
    print(link .. "\\\n") \
  end \
  print(path .. "\\\n") \
else \
  print(rpm.expand("%ghost %{_sysconfdir}/alternatives/" .. name .. "\\\n")) \
  print(link .. "\\\n") \
  print(path .. "\\\n") \
end \
}

# Commands for RPM scriptlets: These must not be empty even if there is no op for
# either update-alternatives or libalternatives

%#FLAVOR#_install_alternative() \# #FLAVOR#_install_alternative: \
%if ! %{with libalternatives} \
%{_python_macro_init} %{lua:python_install_ualternative("#FLAVOR#")} \
%else \
: \# no install scriptlet action for libalternatives \
%endif \
%{nil}

%#FLAVOR#_uninstall_alternative() \# #FLAVOR#_uninstall_alternative: \
%if ! %{with libalternatives} \
%{uninstall_alternative -n %1 -t %{_bindir}/%1-%#FLAVOR#_bin_suffix} \
%else \
: \# no uninstall scriptlet action for libalternatives \
%endif \
%{nil}

%#FLAVOR#_reset_alternative() \# #FLAVOR#_reset_alternative: \
%if %{with libalternatives} \
%{reset_alternative -n %1 -t %{_bindir}/%1-%#FLAVOR#_bin_suffix} \
%else \
: \# reset action only for libalternatives \
%endif \
%{nil}
